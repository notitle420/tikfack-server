// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: video/video.proto

package videoconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	video "github.com/tikfack/server/gen/video"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// VideoServiceName is the fully-qualified name of the VideoService service.
	VideoServiceName = "video.VideoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VideoServiceGetVideosByDateProcedure is the fully-qualified name of the VideoService's
	// GetVideosByDate RPC.
	VideoServiceGetVideosByDateProcedure = "/video.VideoService/GetVideosByDate"
	// VideoServiceGetVideoByIdProcedure is the fully-qualified name of the VideoService's GetVideoById
	// RPC.
	VideoServiceGetVideoByIdProcedure = "/video.VideoService/GetVideoById"
	// VideoServiceSearchVideosProcedure is the fully-qualified name of the VideoService's SearchVideos
	// RPC.
	VideoServiceSearchVideosProcedure = "/video.VideoService/SearchVideos"
)

// VideoServiceClient is a client for the video.VideoService service.
type VideoServiceClient interface {
	GetVideosByDate(context.Context, *connect_go.Request[video.GetVideosByDateRequest]) (*connect_go.Response[video.GetVideosByDateResponse], error)
	GetVideoById(context.Context, *connect_go.Request[video.GetVideoByIdRequest]) (*connect_go.Response[video.GetVideoByIdResponse], error)
	SearchVideos(context.Context, *connect_go.Request[video.SearchVideosRequest]) (*connect_go.Response[video.SearchVideosResponse], error)
}

// NewVideoServiceClient constructs a client for the video.VideoService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVideoServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VideoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &videoServiceClient{
		getVideosByDate: connect_go.NewClient[video.GetVideosByDateRequest, video.GetVideosByDateResponse](
			httpClient,
			baseURL+VideoServiceGetVideosByDateProcedure,
			opts...,
		),
		getVideoById: connect_go.NewClient[video.GetVideoByIdRequest, video.GetVideoByIdResponse](
			httpClient,
			baseURL+VideoServiceGetVideoByIdProcedure,
			opts...,
		),
		searchVideos: connect_go.NewClient[video.SearchVideosRequest, video.SearchVideosResponse](
			httpClient,
			baseURL+VideoServiceSearchVideosProcedure,
			opts...,
		),
	}
}

// videoServiceClient implements VideoServiceClient.
type videoServiceClient struct {
	getVideosByDate *connect_go.Client[video.GetVideosByDateRequest, video.GetVideosByDateResponse]
	getVideoById    *connect_go.Client[video.GetVideoByIdRequest, video.GetVideoByIdResponse]
	searchVideos    *connect_go.Client[video.SearchVideosRequest, video.SearchVideosResponse]
}

// GetVideosByDate calls video.VideoService.GetVideosByDate.
func (c *videoServiceClient) GetVideosByDate(ctx context.Context, req *connect_go.Request[video.GetVideosByDateRequest]) (*connect_go.Response[video.GetVideosByDateResponse], error) {
	return c.getVideosByDate.CallUnary(ctx, req)
}

// GetVideoById calls video.VideoService.GetVideoById.
func (c *videoServiceClient) GetVideoById(ctx context.Context, req *connect_go.Request[video.GetVideoByIdRequest]) (*connect_go.Response[video.GetVideoByIdResponse], error) {
	return c.getVideoById.CallUnary(ctx, req)
}

// SearchVideos calls video.VideoService.SearchVideos.
func (c *videoServiceClient) SearchVideos(ctx context.Context, req *connect_go.Request[video.SearchVideosRequest]) (*connect_go.Response[video.SearchVideosResponse], error) {
	return c.searchVideos.CallUnary(ctx, req)
}

// VideoServiceHandler is an implementation of the video.VideoService service.
type VideoServiceHandler interface {
	GetVideosByDate(context.Context, *connect_go.Request[video.GetVideosByDateRequest]) (*connect_go.Response[video.GetVideosByDateResponse], error)
	GetVideoById(context.Context, *connect_go.Request[video.GetVideoByIdRequest]) (*connect_go.Response[video.GetVideoByIdResponse], error)
	SearchVideos(context.Context, *connect_go.Request[video.SearchVideosRequest]) (*connect_go.Response[video.SearchVideosResponse], error)
}

// NewVideoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVideoServiceHandler(svc VideoServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	videoServiceGetVideosByDateHandler := connect_go.NewUnaryHandler(
		VideoServiceGetVideosByDateProcedure,
		svc.GetVideosByDate,
		opts...,
	)
	videoServiceGetVideoByIdHandler := connect_go.NewUnaryHandler(
		VideoServiceGetVideoByIdProcedure,
		svc.GetVideoById,
		opts...,
	)
	videoServiceSearchVideosHandler := connect_go.NewUnaryHandler(
		VideoServiceSearchVideosProcedure,
		svc.SearchVideos,
		opts...,
	)
	return "/video.VideoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VideoServiceGetVideosByDateProcedure:
			videoServiceGetVideosByDateHandler.ServeHTTP(w, r)
		case VideoServiceGetVideoByIdProcedure:
			videoServiceGetVideoByIdHandler.ServeHTTP(w, r)
		case VideoServiceSearchVideosProcedure:
			videoServiceSearchVideosHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVideoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVideoServiceHandler struct{}

func (UnimplementedVideoServiceHandler) GetVideosByDate(context.Context, *connect_go.Request[video.GetVideosByDateRequest]) (*connect_go.Response[video.GetVideosByDateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("video.VideoService.GetVideosByDate is not implemented"))
}

func (UnimplementedVideoServiceHandler) GetVideoById(context.Context, *connect_go.Request[video.GetVideoByIdRequest]) (*connect_go.Response[video.GetVideoByIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("video.VideoService.GetVideoById is not implemented"))
}

func (UnimplementedVideoServiceHandler) SearchVideos(context.Context, *connect_go.Request[video.SearchVideosRequest]) (*connect_go.Response[video.SearchVideosResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("video.VideoService.SearchVideos is not implemented"))
}
