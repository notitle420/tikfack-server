// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tikfack/server/internal/domain/repository (interfaces: VideoRepository)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_video_repository.go -package=mock github.com/tikfack/server/internal/domain/repository VideoRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/tikfack/server/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockVideoRepository is a mock of VideoRepository interface.
type MockVideoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVideoRepositoryMockRecorder
	isgomock struct{}
}

// MockVideoRepositoryMockRecorder is the mock recorder for MockVideoRepository.
type MockVideoRepositoryMockRecorder struct {
	mock *MockVideoRepository
}

// NewMockVideoRepository creates a new mock instance.
func NewMockVideoRepository(ctrl *gomock.Controller) *MockVideoRepository {
	mock := &MockVideoRepository{ctrl: ctrl}
	mock.recorder = &MockVideoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoRepository) EXPECT() *MockVideoRepositoryMockRecorder {
	return m.recorder
}

// GetVideoById mocks base method.
func (m *MockVideoRepository) GetVideoById(ctx context.Context, dmmId string) (*entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoById", ctx, dmmId)
	ret0, _ := ret[0].(*entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoById indicates an expected call of GetVideoById.
func (mr *MockVideoRepositoryMockRecorder) GetVideoById(ctx, dmmId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoById", reflect.TypeOf((*MockVideoRepository)(nil).GetVideoById), ctx, dmmId)
}

// GetVideosByDate mocks base method.
func (m *MockVideoRepository) GetVideosByDate(ctx context.Context, targetDate time.Time, hits, offset int32) ([]entity.Video, *entity.SearchMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByDate", ctx, targetDate, hits, offset)
	ret0, _ := ret[0].([]entity.Video)
	ret1, _ := ret[1].(*entity.SearchMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVideosByDate indicates an expected call of GetVideosByDate.
func (mr *MockVideoRepositoryMockRecorder) GetVideosByDate(ctx, targetDate, hits, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByDate", reflect.TypeOf((*MockVideoRepository)(nil).GetVideosByDate), ctx, targetDate, hits, offset)
}

// GetVideosByID mocks base method.
func (m *MockVideoRepository) GetVideosByID(ctx context.Context, actressIDs, genreIDs, makerIDs, seriesIDs, directorIDs []string, hits, offset int32, sort, gteDate, lteDate, site, service, floor string) ([]entity.Video, *entity.SearchMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByID", ctx, actressIDs, genreIDs, makerIDs, seriesIDs, directorIDs, hits, offset, sort, gteDate, lteDate, site, service, floor)
	ret0, _ := ret[0].([]entity.Video)
	ret1, _ := ret[1].(*entity.SearchMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVideosByID indicates an expected call of GetVideosByID.
func (mr *MockVideoRepositoryMockRecorder) GetVideosByID(ctx, actressIDs, genreIDs, makerIDs, seriesIDs, directorIDs, hits, offset, sort, gteDate, lteDate, site, service, floor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByID", reflect.TypeOf((*MockVideoRepository)(nil).GetVideosByID), ctx, actressIDs, genreIDs, makerIDs, seriesIDs, directorIDs, hits, offset, sort, gteDate, lteDate, site, service, floor)
}

// GetVideosByKeyword mocks base method.
func (m *MockVideoRepository) GetVideosByKeyword(ctx context.Context, keyword string, hits, offset int32, sort, gteDate, lteDate, site, service, floor string) ([]entity.Video, *entity.SearchMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByKeyword", ctx, keyword, hits, offset, sort, gteDate, lteDate, site, service, floor)
	ret0, _ := ret[0].([]entity.Video)
	ret1, _ := ret[1].(*entity.SearchMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVideosByKeyword indicates an expected call of GetVideosByKeyword.
func (mr *MockVideoRepositoryMockRecorder) GetVideosByKeyword(ctx, keyword, hits, offset, sort, gteDate, lteDate, site, service, floor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByKeyword", reflect.TypeOf((*MockVideoRepository)(nil).GetVideosByKeyword), ctx, keyword, hits, offset, sort, gteDate, lteDate, site, service, floor)
}

// SearchVideos mocks base method.
func (m *MockVideoRepository) SearchVideos(ctx context.Context, keyword, actressID, genreID, makerID, seriesID, directorID string) ([]entity.Video, *entity.SearchMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVideos", ctx, keyword, actressID, genreID, makerID, seriesID, directorID)
	ret0, _ := ret[0].([]entity.Video)
	ret1, _ := ret[1].(*entity.SearchMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchVideos indicates an expected call of SearchVideos.
func (mr *MockVideoRepositoryMockRecorder) SearchVideos(ctx, keyword, actressID, genreID, makerID, seriesID, directorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVideos", reflect.TypeOf((*MockVideoRepository)(nil).SearchVideos), ctx, keyword, actressID, genreID, makerID, seriesID, directorID)
}
