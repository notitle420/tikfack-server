// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tikfack/server/internal/application/usecase/video (interfaces: VideoUsecase)
//
// Generated by this command:
//
//	mockgen -destination=../mock/mock_video_usecase.go -package=mock github.com/tikfack/server/internal/application/usecase/video VideoUsecase
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/tikfack/server/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockVideoUsecase is a mock of VideoUsecase interface.
type MockVideoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockVideoUsecaseMockRecorder
	isgomock struct{}
}

// MockVideoUsecaseMockRecorder is the mock recorder for MockVideoUsecase.
type MockVideoUsecaseMockRecorder struct {
	mock *MockVideoUsecase
}

// NewMockVideoUsecase creates a new mock instance.
func NewMockVideoUsecase(ctrl *gomock.Controller) *MockVideoUsecase {
	mock := &MockVideoUsecase{ctrl: ctrl}
	mock.recorder = &MockVideoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoUsecase) EXPECT() *MockVideoUsecaseMockRecorder {
	return m.recorder
}

// GetVideoById mocks base method.
func (m *MockVideoUsecase) GetVideoById(ctx context.Context, dmmId string) (*entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoById", ctx, dmmId)
	ret0, _ := ret[0].(*entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoById indicates an expected call of GetVideoById.
func (mr *MockVideoUsecaseMockRecorder) GetVideoById(ctx, dmmId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoById", reflect.TypeOf((*MockVideoUsecase)(nil).GetVideoById), ctx, dmmId)
}

// GetVideosByDate mocks base method.
func (m *MockVideoUsecase) GetVideosByDate(ctx context.Context, targetDate time.Time) ([]entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByDate", ctx, targetDate)
	ret0, _ := ret[0].([]entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByDate indicates an expected call of GetVideosByDate.
func (mr *MockVideoUsecaseMockRecorder) GetVideosByDate(ctx, targetDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByDate", reflect.TypeOf((*MockVideoUsecase)(nil).GetVideosByDate), ctx, targetDate)
}

// GetVideosByID mocks base method.
func (m *MockVideoUsecase) GetVideosByID(ctx context.Context, actressIDs, genreIDs, makerIDs, seriesIDs, directorIDs []string, hits, offset int32, sort, gteDate, lteDate, site, service, floor string) ([]entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByID", ctx, actressIDs, genreIDs, makerIDs, seriesIDs, directorIDs, hits, offset, sort, gteDate, lteDate, site, service, floor)
	ret0, _ := ret[0].([]entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByID indicates an expected call of GetVideosByID.
func (mr *MockVideoUsecaseMockRecorder) GetVideosByID(ctx, actressIDs, genreIDs, makerIDs, seriesIDs, directorIDs, hits, offset, sort, gteDate, lteDate, site, service, floor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByID", reflect.TypeOf((*MockVideoUsecase)(nil).GetVideosByID), ctx, actressIDs, genreIDs, makerIDs, seriesIDs, directorIDs, hits, offset, sort, gteDate, lteDate, site, service, floor)
}

// GetVideosByKeyword mocks base method.
func (m *MockVideoUsecase) GetVideosByKeyword(ctx context.Context, keyword string, hits, offset int32, sort, gteDate, lteDate, site, service, floor string) ([]entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByKeyword", ctx, keyword, hits, offset, sort, gteDate, lteDate, site, service, floor)
	ret0, _ := ret[0].([]entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByKeyword indicates an expected call of GetVideosByKeyword.
func (mr *MockVideoUsecaseMockRecorder) GetVideosByKeyword(ctx, keyword, hits, offset, sort, gteDate, lteDate, site, service, floor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByKeyword", reflect.TypeOf((*MockVideoUsecase)(nil).GetVideosByKeyword), ctx, keyword, hits, offset, sort, gteDate, lteDate, site, service, floor)
}

// SearchVideos mocks base method.
func (m *MockVideoUsecase) SearchVideos(ctx context.Context, keyword, actressID, genreID, makerID, seriesID, directorID string) ([]entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVideos", ctx, keyword, actressID, genreID, makerID, seriesID, directorID)
	ret0, _ := ret[0].([]entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVideos indicates an expected call of SearchVideos.
func (mr *MockVideoUsecaseMockRecorder) SearchVideos(ctx, keyword, actressID, genreID, makerID, seriesID, directorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVideos", reflect.TypeOf((*MockVideoUsecase)(nil).SearchVideos), ctx, keyword, actressID, genreID, makerID, seriesID, directorID)
}
