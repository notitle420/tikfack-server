// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tikfack/server/internal/application/usecase/video (interfaces: VideoUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/tikfack/server/internal/domain/entity"
)

// MockVideoUsecase is a mock of VideoUsecase interface.
type MockVideoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockVideoUsecaseMockRecorder
}

// MockVideoUsecaseMockRecorder is the mock recorder for MockVideoUsecase.
type MockVideoUsecaseMockRecorder struct {
	mock *MockVideoUsecase
}

// NewMockVideoUsecase creates a new mock instance.
func NewMockVideoUsecase(ctrl *gomock.Controller) *MockVideoUsecase {
	mock := &MockVideoUsecase{ctrl: ctrl}
	mock.recorder = &MockVideoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoUsecase) EXPECT() *MockVideoUsecaseMockRecorder {
	return m.recorder
}

// GetVideoById mocks base method.
func (m *MockVideoUsecase) GetVideoById(arg0 context.Context, arg1 string) (*entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoById", arg0, arg1)
	ret0, _ := ret[0].(*entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoById indicates an expected call of GetVideoById.
func (mr *MockVideoUsecaseMockRecorder) GetVideoById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoById", reflect.TypeOf((*MockVideoUsecase)(nil).GetVideoById), arg0, arg1)
}

// GetVideosByDate mocks base method.
func (m *MockVideoUsecase) GetVideosByDate(arg0 context.Context, arg1 time.Time) ([]entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByDate", arg0, arg1)
	ret0, _ := ret[0].([]entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByDate indicates an expected call of GetVideosByDate.
func (mr *MockVideoUsecaseMockRecorder) GetVideosByDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByDate", reflect.TypeOf((*MockVideoUsecase)(nil).GetVideosByDate), arg0, arg1)
}

// GetVideosByID mocks base method.
func (m *MockVideoUsecase) GetVideosByID(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 []string, arg6, arg7 int32, arg8, arg9, arg10, arg11, arg12, arg13 string) ([]entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByID", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
	ret0, _ := ret[0].([]entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByID indicates an expected call of GetVideosByID.
func (mr *MockVideoUsecaseMockRecorder) GetVideosByID(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByID", reflect.TypeOf((*MockVideoUsecase)(nil).GetVideosByID), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
}

// GetVideosByKeyword mocks base method.
func (m *MockVideoUsecase) GetVideosByKeyword(arg0 context.Context, arg1 string, arg2, arg3 int32, arg4, arg5, arg6, arg7, arg8, arg9 string) ([]entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByKeyword", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].([]entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByKeyword indicates an expected call of GetVideosByKeyword.
func (mr *MockVideoUsecaseMockRecorder) GetVideosByKeyword(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByKeyword", reflect.TypeOf((*MockVideoUsecase)(nil).GetVideosByKeyword), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// SearchVideos mocks base method.
func (m *MockVideoUsecase) SearchVideos(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string) ([]entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVideos", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVideos indicates an expected call of SearchVideos.
func (mr *MockVideoUsecaseMockRecorder) SearchVideos(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVideos", reflect.TypeOf((*MockVideoUsecase)(nil).SearchVideos), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}
