// Code generated by MockGen. DO NOT EDIT.
// Source: gen/video/videoconnect/video.connect.go
//
// Generated by this command:
//
//	mockgen -source=gen/video/videoconnect/video.connect.go -destination=internal/infrastructure/connect/mock/mock_video_service_server.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connect "github.com/bufbuild/connect-go"
	video "github.com/tikfack/server/gen/video"
	gomock "go.uber.org/mock/gomock"
)

// MockVideoServiceClient is a mock of VideoServiceClient interface.
type MockVideoServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVideoServiceClientMockRecorder
	isgomock struct{}
}

// MockVideoServiceClientMockRecorder is the mock recorder for MockVideoServiceClient.
type MockVideoServiceClientMockRecorder struct {
	mock *MockVideoServiceClient
}

// NewMockVideoServiceClient creates a new mock instance.
func NewMockVideoServiceClient(ctrl *gomock.Controller) *MockVideoServiceClient {
	mock := &MockVideoServiceClient{ctrl: ctrl}
	mock.recorder = &MockVideoServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoServiceClient) EXPECT() *MockVideoServiceClientMockRecorder {
	return m.recorder
}

// GetVideoById mocks base method.
func (m *MockVideoServiceClient) GetVideoById(arg0 context.Context, arg1 *connect.Request[video.GetVideoByIdRequest]) (*connect.Response[video.GetVideoByIdResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoById", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[video.GetVideoByIdResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoById indicates an expected call of GetVideoById.
func (mr *MockVideoServiceClientMockRecorder) GetVideoById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoById", reflect.TypeOf((*MockVideoServiceClient)(nil).GetVideoById), arg0, arg1)
}

// GetVideosByDate mocks base method.
func (m *MockVideoServiceClient) GetVideosByDate(arg0 context.Context, arg1 *connect.Request[video.GetVideosByDateRequest]) (*connect.Response[video.GetVideosByDateResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByDate", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[video.GetVideosByDateResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByDate indicates an expected call of GetVideosByDate.
func (mr *MockVideoServiceClientMockRecorder) GetVideosByDate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByDate", reflect.TypeOf((*MockVideoServiceClient)(nil).GetVideosByDate), arg0, arg1)
}

// GetVideosByID mocks base method.
func (m *MockVideoServiceClient) GetVideosByID(arg0 context.Context, arg1 *connect.Request[video.GetVideosByIDRequest]) (*connect.Response[video.GetVideosByIDResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByID", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[video.GetVideosByIDResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByID indicates an expected call of GetVideosByID.
func (mr *MockVideoServiceClientMockRecorder) GetVideosByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByID", reflect.TypeOf((*MockVideoServiceClient)(nil).GetVideosByID), arg0, arg1)
}

// GetVideosByKeyword mocks base method.
func (m *MockVideoServiceClient) GetVideosByKeyword(arg0 context.Context, arg1 *connect.Request[video.GetVideosByKeywordRequest]) (*connect.Response[video.GetVideosByKeywordResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByKeyword", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[video.GetVideosByKeywordResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByKeyword indicates an expected call of GetVideosByKeyword.
func (mr *MockVideoServiceClientMockRecorder) GetVideosByKeyword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByKeyword", reflect.TypeOf((*MockVideoServiceClient)(nil).GetVideosByKeyword), arg0, arg1)
}

// SearchVideos mocks base method.
func (m *MockVideoServiceClient) SearchVideos(arg0 context.Context, arg1 *connect.Request[video.SearchVideosRequest]) (*connect.Response[video.SearchVideosResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVideos", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[video.SearchVideosResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVideos indicates an expected call of SearchVideos.
func (mr *MockVideoServiceClientMockRecorder) SearchVideos(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVideos", reflect.TypeOf((*MockVideoServiceClient)(nil).SearchVideos), arg0, arg1)
}

// MockVideoServiceHandler is a mock of VideoServiceHandler interface.
type MockVideoServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockVideoServiceHandlerMockRecorder
	isgomock struct{}
}

// MockVideoServiceHandlerMockRecorder is the mock recorder for MockVideoServiceHandler.
type MockVideoServiceHandlerMockRecorder struct {
	mock *MockVideoServiceHandler
}

// NewMockVideoServiceHandler creates a new mock instance.
func NewMockVideoServiceHandler(ctrl *gomock.Controller) *MockVideoServiceHandler {
	mock := &MockVideoServiceHandler{ctrl: ctrl}
	mock.recorder = &MockVideoServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoServiceHandler) EXPECT() *MockVideoServiceHandlerMockRecorder {
	return m.recorder
}

// GetVideoById mocks base method.
func (m *MockVideoServiceHandler) GetVideoById(arg0 context.Context, arg1 *connect.Request[video.GetVideoByIdRequest]) (*connect.Response[video.GetVideoByIdResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoById", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[video.GetVideoByIdResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoById indicates an expected call of GetVideoById.
func (mr *MockVideoServiceHandlerMockRecorder) GetVideoById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoById", reflect.TypeOf((*MockVideoServiceHandler)(nil).GetVideoById), arg0, arg1)
}

// GetVideosByDate mocks base method.
func (m *MockVideoServiceHandler) GetVideosByDate(arg0 context.Context, arg1 *connect.Request[video.GetVideosByDateRequest]) (*connect.Response[video.GetVideosByDateResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByDate", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[video.GetVideosByDateResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByDate indicates an expected call of GetVideosByDate.
func (mr *MockVideoServiceHandlerMockRecorder) GetVideosByDate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByDate", reflect.TypeOf((*MockVideoServiceHandler)(nil).GetVideosByDate), arg0, arg1)
}

// GetVideosByID mocks base method.
func (m *MockVideoServiceHandler) GetVideosByID(arg0 context.Context, arg1 *connect.Request[video.GetVideosByIDRequest]) (*connect.Response[video.GetVideosByIDResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByID", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[video.GetVideosByIDResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByID indicates an expected call of GetVideosByID.
func (mr *MockVideoServiceHandlerMockRecorder) GetVideosByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByID", reflect.TypeOf((*MockVideoServiceHandler)(nil).GetVideosByID), arg0, arg1)
}

// GetVideosByKeyword mocks base method.
func (m *MockVideoServiceHandler) GetVideosByKeyword(arg0 context.Context, arg1 *connect.Request[video.GetVideosByKeywordRequest]) (*connect.Response[video.GetVideosByKeywordResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByKeyword", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[video.GetVideosByKeywordResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByKeyword indicates an expected call of GetVideosByKeyword.
func (mr *MockVideoServiceHandlerMockRecorder) GetVideosByKeyword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByKeyword", reflect.TypeOf((*MockVideoServiceHandler)(nil).GetVideosByKeyword), arg0, arg1)
}

// SearchVideos mocks base method.
func (m *MockVideoServiceHandler) SearchVideos(arg0 context.Context, arg1 *connect.Request[video.SearchVideosRequest]) (*connect.Response[video.SearchVideosResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVideos", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[video.SearchVideosResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVideos indicates an expected call of SearchVideos.
func (mr *MockVideoServiceHandlerMockRecorder) SearchVideos(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVideos", reflect.TypeOf((*MockVideoServiceHandler)(nil).SearchVideos), arg0, arg1)
}
